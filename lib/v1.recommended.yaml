# Copyright 2019 Workiva, Inc.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# This software is derived from pedantic (https://github.com/dart-lang/pedantic)
# with separate copyright notices and license terms:
#
# Copyright 2017, the Dart project authors. All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided
# with the distribution.
# Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived
# from this software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Every lint in this file is categorized as "recommended".
#
# For context on that decision or to discuss a change for any individual lint,
# visit this issue and search for the lint by its name:
# https://github.com/Workiva/workiva_analysis_options/issues/2

# This file also includes all of the required rules.
include: package:workiva_analysis_options/v1.yaml

analyzer:
  errors:
    # Promote enabled lints to errors:
    always_require_non_null_named_parameters: warning
    avoid_bool_literals_in_conditional_expressions: warning
    avoid_function_literals_in_foreach_calls: warning
    avoid_implementing_value_types: warning
    avoid_null_checks_in_equality_operators: warning
    avoid_positional_boolean_parameters: warning
    avoid_relative_lib_imports: warning
    avoid_renaming_method_parameters: warning
    avoid_returning_this: warning
    avoid_returning_null: warning
    avoid_returning_null_for_future: warning
    avoid_returning_null_for_void: warning
    avoid_setters_without_getters: warning
    avoid_types_on_closure_parameters: warning
    avoid_unused_constructor_parameters: warning
    cascade_invocations: warning
    comment_references: warning
    curly_braces_in_flow_control_structures: warning
    join_return_with_assignment: warning
    omit_local_variable_types: warning
    overridden_fields: warning
    package_api_docs: warning
    package_prefixed_library_names: warning
    package_names: warning
    prefer_adjacent_string_concatenation: warning
    prefer_asserts_in_initializer_lists: warning
    prefer_collection_literals: warning
    prefer_conditional_assignment: warning
    prefer_const_declarations: warning
    provide_deprecation_message: warning
    prefer_final_fields: warning
    prefer_final_in_for_each: warning
    prefer_final_locals: warning
    prefer_function_declarations_over_variables: warning
    prefer_if_elements_to_conditional_expressions: warning
    prefer_initializing_formals: warning
    prefer_inlined_adds: warning
    prefer_interpolation_to_compose_strings: warning
    prefer_iterable_whereType: warning
    prefer_mixin: warning
    prefer_null_aware_operators: warning
    prefer_single_quotes: warning
    prefer_spread_collections: warning
    prefer_void_to_null: warning
    sort_pub_dependencies: warning
    test_types_in_equals: warning
    type_annotate_public_apis: warning
    unawaited_futures: warning
    unnecessary_await_in_return: warning
    unnecessary_brace_in_string_interps: warning
    unnecessary_getters_setters: warning
    unnecessary_lambdas: warning
    unnecessary_parenthesis: warning
    unnecessary_overrides: warning
    unnecessary_this: warning
    use_function_type_syntax_for_parameters: warning
    use_rethrow_when_possible: warning

linter:
  rules:
    - always_require_non_null_named_parameters
    - avoid_bool_literals_in_conditional_expressions
    - avoid_function_literals_in_foreach_calls
    - avoid_implementing_value_types
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    - avoid_relative_lib_imports
    - avoid_renaming_method_parameters
    - avoid_returning_this
    - avoid_returning_null
    - avoid_returning_null_for_future
    - avoid_returning_null_for_void
    - avoid_setters_without_getters
    - avoid_types_on_closure_parameters
    - avoid_unused_constructor_parameters
    - cascade_invocations
    - comment_references
    - curly_braces_in_flow_control_structures
    - join_return_with_assignment
    - omit_local_variable_types
    - overridden_fields
    - package_api_docs
    - package_prefixed_library_names
    - package_names
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_declarations
    - provide_deprecation_message
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_function_declarations_over_variables
    - prefer_if_elements_to_conditional_expressions
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_interpolation_to_compose_strings
    - prefer_iterable_whereType
    - prefer_mixin
    - prefer_null_aware_operators
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_void_to_null
    - sort_pub_dependencies
    - test_types_in_equals
    - type_annotate_public_apis
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_parenthesis
    - unnecessary_overrides
    - unnecessary_this
    - use_function_type_syntax_for_parameters
    - use_rethrow_when_possible
